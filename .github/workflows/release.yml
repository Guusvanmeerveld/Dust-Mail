name: "Build release"

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-release.yml
    tags:
      - "v[0-9]+.*"

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  docker:
    name: Build Docker image for client and server
    runs-on: ubuntu-latest

    needs: create_release

    strategy:
      matrix:
        type: [server, web]

    steps:
      - name: Setup
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Get latest tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF:10}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: guusvanmeerveld
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build app image
        uses: docker/build-push-action@v3
        with:
          tags: |
            guusvanmeerveld/dust-mail:${{ steps.vars.outputs.tag }}-${{ matrix.type }}
            guusvanmeerveld/dust-mail:latest-${{ matrix.type }}
            ghcr.io/guusvanmeerveld/dust-mail:${{ steps.vars.outputs.tag }}-${{ matrix.type }}
            ghcr.io/guusvanmeerveld/dust-mail:latest-${{ matrix.type }}

          push: true

          context: .
          file: packages/${{ matrix.type }}/Dockerfile

          platforms: linux/amd64,linux/arm64

          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-standalone:
    name: Build Docker image for standalone
    runs-on: ubuntu-latest

    needs: create_release

    steps:
      - name: Setup
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Get latest tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF:10}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: guusvanmeerveld
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build app image
        uses: docker/build-push-action@v3
        with:
          tags: |
            guusvanmeerveld/dust-mail:${{ steps.vars.outputs.tag }}
            guusvanmeerveld/dust-mail:latest
            ghcr.io/guusvanmeerveld/dust-mail:${{ steps.vars.outputs.tag }}
            ghcr.io/guusvanmeerveld/dust-mail:latest

          push: true

          context: .
          file: Dockerfile

          platforms: linux/amd64,linux/arm64

          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to Docker hub
        uses: guusvanmeerveld/actions/docker@main
        with:
          username: guusvanmeerveld
          token: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: |
            guusvanmeerveld/dust-mail:${{ steps.vars.outputs.tag }}-standalone
            guusvanmeerveld/dust-mail:standalone
            guusvanmeerveld/dust-mail:latest
          context: .
          platforms: linux/amd64,linux/arm64

  deploy-fly:
    name: Deploy to Fly.io

    runs-on: ubuntu-latest

    steps:
      - name: Setup
        uses: actions/checkout@v2

      - name: Setup Fly.io utility
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  release_assets:
    name: Release assets
    needs: create_release

    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    steps:
      - name: Setup
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
          cache: "pnpm"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.61
          default: true
          override: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v1
        with:
          working-directory: ./apps/web/src-tauri

      - name: Install NPM dependencies
        run: pnpm install

      - name: Fetch crates
        working-directory: ./apps/web/src-tauri
        run: cargo fetch --locked

      - name: Install dependencies (linux only)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: apps/web
          releaseId: ${{ needs.create_release.outputs.release_id }}
